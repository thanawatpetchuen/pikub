[{"D:\\dev\\notember-ts\\src\\index.tsx":"1","D:\\dev\\notember-ts\\src\\App.tsx":"2","D:\\dev\\notember-ts\\src\\reportWebVitals.ts":"3","D:\\dev\\notember-ts\\src\\App.test.tsx":"4","D:\\dev\\notember-ts\\src\\react-app-env.d.ts":"5","D:\\dev\\notember-ts\\src\\setupTests.ts":"6","D:\\dev\\notember-ts\\src\\services\\todo.ts":"7","D:\\dev\\notember-ts\\src\\model\\trade.ts":"8","D:\\dev\\notember-ts\\src\\services\\timer.tsx":"9"},{"size":500,"mtime":1612016305248,"results":"10","hashOfConfig":"11"},{"size":5668,"mtime":1612028356230,"results":"12","hashOfConfig":"11"},{"size":425,"mtime":1612014978523,"results":"13","hashOfConfig":"11"},{"size":273,"mtime":1612014978523,"results":"14","hashOfConfig":"11"},{"size":1325,"mtime":1612015078384,"results":"15","hashOfConfig":"11"},{"size":241,"mtime":1612014978523,"results":"16","hashOfConfig":"11"},{"size":444,"mtime":1612019017392,"results":"17","hashOfConfig":"11"},{"size":431,"mtime":1612026730555,"results":"18","hashOfConfig":"11"},{"size":597,"mtime":1612019755535,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1s29mfh",{"filePath":"22","messages":"23","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\dev\\notember-ts\\src\\index.tsx",[],"D:\\dev\\notember-ts\\src\\App.tsx",["40","41"],"import axios from 'axios';\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\n\nimport useWebSocket, { ReadyState } from 'react-use-websocket';\nimport { WebSocketHook } from 'react-use-websocket/dist/lib/types';\nimport './App.css';\nimport { AllSymbol, Trade } from './model/trade';\n\n// const noMessage: Trade = {}\n\nconst useSymbols = () => {\n  const [symbols, setSymbols] = useState<AllSymbol | undefined>()\n\n  const fetchData = useCallback(async () => {\n    try {\n      const { data } = await axios.get('https://api.bitkub.com/api/market/symbols', {\n        headers: {\n          'Access-Control-Allow-Origin': '*'\n        }\n      })\n      console.log({ data })\n      setSymbols(data as AllSymbol)\n    } catch (err) {\n      console.log(err)\n    }\n  }, [])\n\n  useEffect(() => {\n    fetchData()\n  }, [fetchData])\n\n  return symbols\n}\n\nconst useToggle = () => {\n  const [isOpen, setOpen] = useState(false);\n\n  const open = useCallback(() => setOpen(true), [])\n  const close = useCallback(() => setOpen(false), [])\n  const toggle = useCallback(() => setOpen(!isOpen), [isOpen])\n\n  return { isOpen, open, close, toggle }\n}\n\nconst App = () => {\n\n  const [currentMessage, setMessage] = useState<Trade>();\n  const [user, setUser] = useState(false)\n  const symbols = useSymbols()\n  const { isOpen, toggle } = useToggle()\n  const [selectedSymbol, setSelectedSymbol] = useState<string>('xrp')\n\n  // useEffect(() => {\n  //   if (!!selectedSymbol && symbols && symbols.result.length > 0) {\n  //     setSelectedSymbol(symbols.result[0].symbol)\n  //   }\n  // }, [selectedSymbol, symbols])\n  // const [in, setBuys] = useState<Trade>();\n\n  const [buyVal, setBuy] = useState(0);\n  const [sellVal, setSell] = useState(0);\n\n  console.log({ symbols })\n\n  const {\n    sendMessage,\n    lastMessage,\n    readyState,\n  }: WebSocketHook<MessageEvent<string>> = useWebSocket(`wss://api.bitkub.com/websocket-api/market.trade.thb_${selectedSymbol}`);\n\n  useEffect(() => {\n    console.log(lastMessage?.data)\n    if (lastMessage?.data) {\n      setMessage(JSON.parse(lastMessage?.data) as Trade)\n    }\n  }, [lastMessage])\n\n  const connectionStatus = {\n    [ReadyState.CONNECTING]: 'Connecting',\n    [ReadyState.OPEN]: 'Connected to BitKub',\n    [ReadyState.CLOSING]: 'Closing',\n    [ReadyState.CLOSED]: 'Closed',\n    [ReadyState.UNINSTANTIATED]: 'Uninstantiated',\n  }[readyState];\n\n  const selected = useMemo(() => user ? sellVal : currentMessage?.rat || 0, [currentMessage?.rat, sellVal, user])\n\n  const changes = useMemo(() => ((selected - buyVal) / buyVal), [buyVal, selected])\n\n  const start = 5000;\n  const step = 5000;\n  const count = 10;\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <span>{connectionStatus}</span>\n        <div style={{ width: '100%' }}>\n          <div style={{ display: 'inline-block', width: '50%' }}>\n            Symbol:\n          </div>\n          <div style={{ display: 'inline-block', width: '50%' }} onClick={() => {\n            const sym = prompt('Select currency')\n            if (sym) {\n              setSelectedSymbol(sym)\n            }\n          }}>\n            {isOpen && (\n              <select onChange={({ target: { value } }) => setSelectedSymbol(value)}>\n                {symbols?.result.map((symbol => (\n                  <option key={symbol.id} value={symbol.symbol}>{symbol.symbol}</option>\n                )))}\n              </select>\n            )}\n            {currentMessage ? currentMessage.sym : null}\n          </div>\n        </div>\n        <div style={{ width: '100%' }}>\n          <div style={{ display: 'inline-block', width: '50%' }}>\n            Current Rate:\n          </div>\n          <div style={{ display: 'inline-block', width: '50%' }}>\n            {currentMessage ? currentMessage.rat.toLocaleString('th-TH') : null}\n          </div>\n        </div>\n        <div style={{ marginTop: '20px', width: '100%' }}>\n          <div style={{ display: 'inline-block', width: '33%' }}>\n            Buy\n          </div>\n          <div style={{ display: 'inline-block', width: '33%' }}>\n            Sell\n            <input type=\"checkbox\" checked={user} onChange={() => setUser(!user)} />\n          </div>\n          <div style={{ display: 'inline-block', width: '33%' }}>\n            Change(%)\n          </div>\n        </div>\n        <div style={{ marginTop: '20px', width: '100%' }}>\n          <div style={{ display: 'inline-block', width: '33%' }}>\n            <input name=\"in\" type=\"number\" placeholder=\"in\" value={buyVal} onChange={({ target: { value } }) => setBuy(parseFloat(value))} />\n          </div>\n          <div style={{ display: 'inline-block', width: '33%' }}>\n            <input name=\"out\" type=\"number\" placeholder=\"out\" value={sellVal} onChange={({ target: { value } }) => setSell(parseFloat(value))} />\n          </div>\n          <div style={{ display: 'inline-block', width: '33%' }}>\n            {`${(changes * 100).toLocaleString('th-TH')} %`}\n          </div>\n        </div>\n        <div style={{ marginTop: '5px', width: '100%' }}>\n          {Array.apply(null, Array(count)).map((_, i) => {\n            const index = i\n            const currentAmount = start + (step * index)\n            return (\n              <div key={i}>\n                <div style={{ display: 'inline-block', width: '50%' }}>\n                  {currentAmount.toLocaleString('th-TH')}\n                </div>\n                <div style={{ display: 'inline-block', width: '50%' }}>\n                  {(currentAmount * changes).toLocaleString('th-TH')} BHT\n                </div>\n              </div>\n            )\n          })}\n\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","D:\\dev\\notember-ts\\src\\reportWebVitals.ts",[],"D:\\dev\\notember-ts\\src\\App.test.tsx",[],"D:\\dev\\notember-ts\\src\\react-app-env.d.ts",[],"D:\\dev\\notember-ts\\src\\setupTests.ts",[],"D:\\dev\\notember-ts\\src\\services\\todo.ts",["42"],"import axios from \"axios\";\nimport { useCallback } from \"react\";\nimport useSWR from \"swr\";\n\nconst fetcher = <T = any>(url: string) => axios.get(url).then((res) => res.data as T);\n\nexport interface Todo {\n    userId: number,\n\tid: number,\n\ttitle: number,\n\tcompleted: boolean\n}\n\nexport const useTodoService = () => {\n  const getTodo = useCallback(() => fetcher<Todo>('https://jsonplaceholder.typicode.com/todos/13'), []);\n\n  return { getTodo };\n};\n","D:\\dev\\notember-ts\\src\\model\\trade.ts",[],"D:\\dev\\notember-ts\\src\\services\\timer.tsx",[],{"ruleId":"43","severity":1,"message":"44","line":50,"column":19,"nodeType":"45","messageId":"46","endLine":50,"endColumn":25},{"ruleId":"43","severity":1,"message":"47","line":66,"column":5,"nodeType":"45","messageId":"46","endLine":66,"endColumn":16},{"ruleId":"43","severity":1,"message":"48","line":3,"column":8,"nodeType":"45","messageId":"46","endLine":3,"endColumn":14},"@typescript-eslint/no-unused-vars","'toggle' is assigned a value but never used.","Identifier","unusedVar","'sendMessage' is assigned a value but never used.","'useSWR' is defined but never used."]